{
	"info": {
		"_postman_id": "b78b8eba-c056-4926-884c-90ce022dc360",
		"name": "ETAPA_IV",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let chars = 'abcdefghijklmnopqrstuvwxyz1234567890'\r",
							"let string = ''\r",
							"let email = ''\r",
							"for(var i=0; i<7; i++){\r",
							"    string += chars[Math.floor(Math.random() * chars.length)]\r",
							"}\r",
							"email = string + '@bemoldigital.com'\r",
							"pm.environment.set(\"email\", email)\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Messge should be Cadastro realizado com sucesso and Id should not be empty\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql('Cadastro realizado com sucesso');\r",
							"    pm.expect(jsonData._id).not.eql(null)\r",
							"    pm.environment.set('id_user',jsonData._id)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"nome\": \"Marcelo Vasconcelos\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/usuarios",
					"host": [
						"{{url}}"
					],
					"path": [
						"usuarios"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User Registered",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User registered previously is returned\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get('id_user'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://serverest.dev/usuarios",
					"protocol": "https",
					"host": [
						"serverest",
						"dev"
					],
					"path": [
						"usuarios"
					]
				}
			},
			"response": []
		},
		{
			"name": "Creat Products",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Login to generate token \r",
							"pm.sendRequest({\r",
							"    url: 'https://serverest.dev/login',\r",
							"    method: 'POST',\r",
							"    header: {'content-type': 'application/json'},\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(\r",
							"            { \r",
							"              email:    \"fulano@qa.com\",\r",
							"              password: \"teste\"\r",
							"            \r",
							"            })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"   \r",
							"    pm.environment.set(\"authorization\", res.json().authorization);\r",
							"});\r",
							"\r",
							"//Generate random name\r",
							"let chars = 'abcdefghijklmnopqrstuvwxyz1234567890'\r",
							"let name = ''\r",
							"\r",
							"for(var i=0; i<7; i++){\r",
							"    name += chars[Math.floor(Math.random() * chars.length)]\r",
							"}\r",
							"pm.environment.set(\"name\", name)\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Message should be Cadastro realizado com sucesso and Id should not be empty\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql('Cadastro realizado com sucesso');\r",
							"    pm.expect(jsonData._id).not.eql(null)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "authorization",
						"value": "{{authorization}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"nome\": \"{{name}}\",\r\n  \"preco\": \"470\",\r\n  \"descricao\": \"Mouse bom\",\r\n  \"quantidade\": \"5\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/produtos",
					"host": [
						"{{url}}"
					],
					"path": [
						"produtos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product Registered",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User registered previously is returned\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get('id_product'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://serverest.dev/produtos",
					"protocol": "https",
					"host": [
						"serverest",
						"dev"
					],
					"path": [
						"produtos"
					]
				}
			},
			"response": []
		}
	]
}